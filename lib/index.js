var pathExists = require("path-exists");
var fs = require("fs");
var merge = require("json-add");
var Promise = require("bluebird");
var exec = require("promised-exec");
module.exports = function (options) {
    var outputFileSync = fs.writeFileSync;
    return new Promise(function (resolve, reject) {
        if (!pathExists.sync('/etc/default/hostapd')) {
            reject('no default conf file was founded for hostapd');
        }
        if (!options || typeof (options) != 'object') {
            reject('Type Error, provide a valid json object');
        }
        if (!options.interface) {
            reject('No configuration interface was provided');
        }
        if (!options.ssid) {
            reject('No configuration interface was provided');
        }
        function parsemasq(config) {
            var write = '';
            for (var c = 0; c < Object.keys(config).length; c++) {
                if (Object.keys(config)[c] != 'path') {
                    write = write + Object.keys(config)[c] + '=' + config[Object.keys(config)[c]] + '\n';
                }
            }
            return write;
        }
        var config = {
            path: '/etc/hostapd/hostapd.conf',
            driver: 'nl80211',
            hw_mode: 'g',
            channel: 2,
            macaddr_acl: 0,
            auth_algs: 1,
            ignore_broadcast_ssid: 0,
            test: false
        };
        if (options.wpa_passphrase) {
            var wpa_standard = {
                wpa: 2,
                wpa_key_mgmt: 'WPA-PSK',
                wpa_pairwise: 'TKIP',
                rsn_pairwise: 'CCMP'
            };
            merge(config, wpa_standard);
        }
        merge(config, options);
        if (!config.test) {
            outputFileSync('/etc/default/hostapd', 'DAEMON_CONF="' + config.path + '"', 'utf-8');
        }
        outputFileSync(config.path, parsemasq(config), 'utf-8');
        if (!config.test) {
            exec('systemctl restart hostapd').then(function () {
                resolve(config);
            }).catch(function (err) {
                console.log(err);
                reject(err);
            });
        }
        else {
            exec('echo').then(function () {
                resolve(config);
            }).catch(function (err) {
                console.log(err);
                reject(err);
            });
        }
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9pbmRleC50cyJdLCJuYW1lcyI6WyJwYXJzZW1hc3EiXSwibWFwcGluZ3MiOiJBQUFBLElBQVksVUFBVSxXQUFNLGFBQWEsQ0FBQyxDQUFBO0FBQzFDLElBQVksRUFBRSxXQUFNLElBQUksQ0FBQyxDQUFBO0FBQ3pCLElBQU8sS0FBSyxXQUFVLFVBQVUsQ0FBQyxDQUFDO0FBQ2xDLElBQVksT0FBTyxXQUFNLFVBQVUsQ0FBQyxDQUFBO0FBQ3BDLElBQUksSUFBSSxHQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUVsQyxpQkFBTyxVQUFTLE9BQTREO0lBQ3BFLElBQUksY0FBYyxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUM7SUFDNUMsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLFVBQVMsT0FBTyxFQUFDLE1BQU07UUFFMUMsRUFBRSxDQUFBLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQSxDQUFDO1lBQzNDLE1BQU0sQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFBO1FBQ3hELENBQUM7UUFDRCxFQUFFLENBQUEsQ0FBQyxDQUFDLE9BQU8sSUFBSSxPQUFNLENBQUMsT0FBTyxDQUFDLElBQUUsUUFBUSxDQUFDLENBQUEsQ0FBQztZQUN4QyxNQUFNLENBQUMseUNBQXlDLENBQUMsQ0FBQTtRQUNuRCxDQUFDO1FBQ0QsRUFBRSxDQUFBLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUEsQ0FBQztZQUNyQixNQUFNLENBQUMseUNBQXlDLENBQUMsQ0FBQTtRQUNuRCxDQUFDO1FBQ0QsRUFBRSxDQUFBLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBQztZQUNoQixNQUFNLENBQUMseUNBQXlDLENBQUMsQ0FBQTtRQUNuRCxDQUFDO1FBRUQsbUJBQW1CLE1BQU07WUFDdkJBLElBQUlBLEtBQUtBLEdBQUNBLEVBQUVBLENBQUNBO1lBQ2JBLEdBQUdBLENBQUFBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUNBLENBQUNBLEVBQUNBLENBQUNBLEdBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLE1BQU1BLEVBQUNBLENBQUNBLEVBQUVBLEVBQUNBLENBQUNBO2dCQUM1Q0EsRUFBRUEsQ0FBQUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBRUEsTUFBTUEsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7b0JBQ2pDQSxLQUFLQSxHQUFDQSxLQUFLQSxHQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFDQSxHQUFHQSxHQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFDQSxJQUFJQSxDQUFDQTtnQkFDN0VBLENBQUNBO1lBQ0hBLENBQUNBO1lBQ0RBLE1BQU1BLENBQUNBLEtBQUtBLENBQUFBO1FBQ2RBLENBQUNBO1FBRUQsSUFBSSxNQUFNLEdBQUM7WUFDVCxJQUFJLEVBQUMsMkJBQTJCO1lBQ2hDLE1BQU0sRUFBQyxTQUFTO1lBQ2hCLE9BQU8sRUFBQyxHQUFHO1lBQ1gsT0FBTyxFQUFDLENBQUM7WUFDVCxXQUFXLEVBQUMsQ0FBQztZQUNiLFNBQVMsRUFBQyxDQUFDO1lBQ1gscUJBQXFCLEVBQUMsQ0FBQztZQUN2QixJQUFJLEVBQUMsS0FBSztTQUNYLENBQUE7UUFJRCxFQUFFLENBQUEsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUEsQ0FBQztZQUN6QixJQUFJLFlBQVksR0FBQztnQkFDZixHQUFHLEVBQUMsQ0FBQztnQkFDTCxZQUFZLEVBQUMsU0FBUztnQkFDdEIsWUFBWSxFQUFDLE1BQU07Z0JBQ25CLFlBQVksRUFBQyxNQUFNO2FBQ3BCLENBQUE7WUFDRCxLQUFLLENBQUMsTUFBTSxFQUFDLFlBQVksQ0FBQyxDQUFBO1FBQzVCLENBQUM7UUFFRCxLQUFLLENBQUMsTUFBTSxFQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ3JCLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUM7WUFFbEIsY0FBYyxDQUFDLHNCQUFzQixFQUFFLGVBQWUsR0FBQyxNQUFNLENBQUMsSUFBSSxHQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUVqRixDQUFDO1FBR0QsY0FBYyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3hELEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUM7WUFFaEIsSUFBSSxDQUFDLDJCQUEyQixDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUNyQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUE7WUFDakIsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVMsR0FBRztnQkFDbkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtnQkFDaEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQ2IsQ0FBQyxDQUFDLENBQUE7UUFDTixDQUFDO1FBQUEsSUFBSSxDQUFBLENBQUM7WUFDSixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUNoQixPQUFPLENBQUMsTUFBTSxDQUFDLENBQUE7WUFDakIsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVMsR0FBRztnQkFDbkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtnQkFDaEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQ2IsQ0FBQyxDQUFDLENBQUE7UUFDSixDQUFDO0lBQ0MsQ0FBQyxDQUFDLENBQUE7QUFFSixDQUFDLENBQUMiLCJmaWxlIjoibGliL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcGF0aEV4aXN0cyBmcm9tIFwicGF0aC1leGlzdHNcIjtcbmltcG9ydCAqIGFzIGZzIGZyb20gXCJmc1wiO1xuaW1wb3J0IG1lcmdlID1yZXF1aXJlKFwianNvbi1hZGRcIik7XG5pbXBvcnQgKiBhcyBQcm9taXNlIGZyb20gXCJibHVlYmlyZFwiO1xubGV0IGV4ZWM9cmVxdWlyZShcInByb21pc2VkLWV4ZWNcIik7XG5cbmV4cG9ydD1mdW5jdGlvbihvcHRpb25zOntpbnRlcmZhY2U6c3RyaW5nLHNzaWQ6c3RyaW5nLHdwYV9wYXNzcGhyYXNlOnN0cmluZ30pe1xuICAgICAgICBsZXQgb3V0cHV0RmlsZVN5bmMgPSBmcy53cml0ZUZpbGVTeW5jO1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3Qpe1xuXG4gIGlmKCFwYXRoRXhpc3RzLnN5bmMoJy9ldGMvZGVmYXVsdC9ob3N0YXBkJykpe1xuICAgIHJlamVjdCgnbm8gZGVmYXVsdCBjb25mIGZpbGUgd2FzIGZvdW5kZWQgZm9yIGhvc3RhcGQnKVxuICB9XG4gIGlmKCFvcHRpb25zIHx8IHR5cGVvZihvcHRpb25zKSE9J29iamVjdCcpe1xuICAgIHJlamVjdCgnVHlwZSBFcnJvciwgcHJvdmlkZSBhIHZhbGlkIGpzb24gb2JqZWN0JylcbiAgfVxuICBpZighb3B0aW9ucy5pbnRlcmZhY2Upe1xuICAgIHJlamVjdCgnTm8gY29uZmlndXJhdGlvbiBpbnRlcmZhY2Ugd2FzIHByb3ZpZGVkJylcbiAgfVxuICBpZighb3B0aW9ucy5zc2lkKXtcbiAgICByZWplY3QoJ05vIGNvbmZpZ3VyYXRpb24gaW50ZXJmYWNlIHdhcyBwcm92aWRlZCcpXG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZW1hc3EoY29uZmlnKXtcbiAgICB2YXIgd3JpdGU9Jyc7XG4gICAgZm9yKHZhciBjPTA7YzxPYmplY3Qua2V5cyhjb25maWcpLmxlbmd0aDtjKyspe1xuICAgICAgaWYoT2JqZWN0LmtleXMoY29uZmlnKVtjXSE9J3BhdGgnKXtcbiAgICAgICAgd3JpdGU9d3JpdGUrT2JqZWN0LmtleXMoY29uZmlnKVtjXSsnPScrY29uZmlnW09iamVjdC5rZXlzKGNvbmZpZylbY11dKydcXG4nO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gd3JpdGVcbiAgfVxuXG4gIHZhciBjb25maWc9e1xuICAgIHBhdGg6Jy9ldGMvaG9zdGFwZC9ob3N0YXBkLmNvbmYnLFxuICAgIGRyaXZlcjonbmw4MDIxMScsXG4gICAgaHdfbW9kZTonZycsXG4gICAgY2hhbm5lbDoyLFxuICAgIG1hY2FkZHJfYWNsOjAsXG4gICAgYXV0aF9hbGdzOjEsXG4gICAgaWdub3JlX2Jyb2FkY2FzdF9zc2lkOjAsXG4gICAgdGVzdDpmYWxzZVxuICB9XG5cblxuXG4gIGlmKG9wdGlvbnMud3BhX3Bhc3NwaHJhc2Upe1xuICAgIHZhciB3cGFfc3RhbmRhcmQ9e1xuICAgICAgd3BhOjIsXG4gICAgICB3cGFfa2V5X21nbXQ6J1dQQS1QU0snLFxuICAgICAgd3BhX3BhaXJ3aXNlOidUS0lQJyxcbiAgICAgIHJzbl9wYWlyd2lzZTonQ0NNUCdcbiAgICB9XG4gICAgbWVyZ2UoY29uZmlnLHdwYV9zdGFuZGFyZClcbiAgfVxuXG4gIG1lcmdlKGNvbmZpZyxvcHRpb25zKVxuICBpZiAoIWNvbmZpZy50ZXN0KXtcbiAgLy8gaWYoZnMucmVhZEZpbGVTeW5jKCcvZXRjL2RlZmF1bHQvaG9zdGFwZCcpIT0nREFFTU9OX0NPTkY9XCInK2NvbmZpZy5wYXRoKydcIicpe1xuICBvdXRwdXRGaWxlU3luYygnL2V0Yy9kZWZhdWx0L2hvc3RhcGQnLCAnREFFTU9OX0NPTkY9XCInK2NvbmZpZy5wYXRoKydcIicsICd1dGYtOCcpO1xuICAvLyB9XG4gIH1cblxuICAvLyBtYW5jYSBpbCBjb250cm9sbG8gY2hlIGV2aXRhIGRpIHJpc2NyaXZlcmUgaWwgZmlsZSBzZSDDqCBpZGVudGljbyBhIHF1ZWxsbyBwcmVzZW50ZVxuICBvdXRwdXRGaWxlU3luYyhjb25maWcucGF0aCwgcGFyc2VtYXNxKGNvbmZpZyksICd1dGYtOCcpO1xuICBpZiAoIWNvbmZpZy50ZXN0KXtcblxuICAgIGV4ZWMoJ3N5c3RlbWN0bCByZXN0YXJ0IGhvc3RhcGQnKS50aGVuKGZ1bmN0aW9uKCl7XG4gICAgICByZXNvbHZlKGNvbmZpZylcbiAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpe1xuICAgICAgY29uc29sZS5sb2coZXJyKVxuICAgICAgcmVqZWN0KGVycilcbiAgICB9KVxufWVsc2V7XG4gIGV4ZWMoJ2VjaG8nKS50aGVuKGZ1bmN0aW9uKCl7XG4gICAgcmVzb2x2ZShjb25maWcpXG4gIH0pLmNhdGNoKGZ1bmN0aW9uKGVycil7XG4gICAgY29uc29sZS5sb2coZXJyKVxuICAgIHJlamVjdChlcnIpXG4gIH0pXG59XG4gIH0pXG5cbn07XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
