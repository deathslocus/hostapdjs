var pathExists = require("path-exists");
var fs = require("fs");
var merge = require("json-add");
var Promise = require("bluebird");
var exec = require("promised-exec");
module.exports = function (options) {
    var outputFileSync = fs.writeFileSync;
    return new Promise(function (resolve, reject) {
        if (!pathExists.sync('/etc/default/hostapd')) {
            reject('no default conf file was founded for hostapd');
        }
        if (!options || typeof (options) != 'object') {
            reject('Type Error, provide a valid json object');
        }
        if (!options.interface) {
            reject('No configuration interface was provided');
        }
        if (!options.ssid) {
            reject('No configuration interface was provided');
        }
        function parsemasq(config) {
            var write = '';
            for (var c = 0; c < Object.keys(config).length; c++) {
                if (Object.keys(config)[c] != 'path' && Object.keys(config)[c] != 'test') {
                    write = write + Object.keys(config)[c] + '=' + config[Object.keys(config)[c]] + '\n';
                }
            }
            return write;
        }
        var config = {
            path: '/etc/hostapd/hostapd.conf',
            driver: 'nl80211',
            hw_mode: 'g',
            channel: 2,
            macaddr_acl: 0,
            auth_algs: 1,
            ignore_broadcast_ssid: 0,
            test: false
        };
        if (options.wpa_passphrase) {
            var wpa_standard = {
                wpa: 2,
                wpa_key_mgmt: 'WPA-PSK',
                wpa_pairwise: 'TKIP',
                rsn_pairwise: 'CCMP'
            };
            merge(config, wpa_standard);
        }
        merge(config, options);
        if (!config.test) {
            outputFileSync('/etc/default/hostapd', 'DAEMON_CONF="' + config.path + '"', 'utf-8');
        }
        outputFileSync(config.path, parsemasq(config), 'utf-8');
        if (!config.test) {
            exec('systemctl restart hostapd').then(function () {
                resolve(config);
            }).catch(function (err) {
                console.log(err);
                reject(err);
            });
        }
        else {
            exec('echo').then(function () {
                resolve(config);
            }).catch(function (err) {
                console.log(err);
                reject(err);
            });
        }
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9pbmRleC50cyJdLCJuYW1lcyI6WyJwYXJzZW1hc3EiXSwibWFwcGluZ3MiOiJBQUFBLElBQVksVUFBVSxXQUFNLGFBQWEsQ0FBQyxDQUFBO0FBQzFDLElBQVksRUFBRSxXQUFNLElBQUksQ0FBQyxDQUFBO0FBQ3pCLElBQU8sS0FBSyxXQUFVLFVBQVUsQ0FBQyxDQUFDO0FBQ2xDLElBQVksT0FBTyxXQUFNLFVBQVUsQ0FBQyxDQUFBO0FBQ3BDLElBQUksSUFBSSxHQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUVsQyxpQkFBTyxVQUFTLE9BQTREO0lBQ3BFLElBQUksY0FBYyxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUM7SUFDNUMsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLFVBQVMsT0FBTyxFQUFDLE1BQU07UUFFMUMsRUFBRSxDQUFBLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQSxDQUFDO1lBQzNDLE1BQU0sQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFBO1FBQ3hELENBQUM7UUFDRCxFQUFFLENBQUEsQ0FBQyxDQUFDLE9BQU8sSUFBSSxPQUFNLENBQUMsT0FBTyxDQUFDLElBQUUsUUFBUSxDQUFDLENBQUEsQ0FBQztZQUN4QyxNQUFNLENBQUMseUNBQXlDLENBQUMsQ0FBQTtRQUNuRCxDQUFDO1FBQ0QsRUFBRSxDQUFBLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUEsQ0FBQztZQUNyQixNQUFNLENBQUMseUNBQXlDLENBQUMsQ0FBQTtRQUNuRCxDQUFDO1FBQ0QsRUFBRSxDQUFBLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBQztZQUNoQixNQUFNLENBQUMseUNBQXlDLENBQUMsQ0FBQTtRQUNuRCxDQUFDO1FBRUQsbUJBQW1CLE1BQU07WUFDdkJBLElBQUlBLEtBQUtBLEdBQUNBLEVBQUVBLENBQUNBO1lBQ2JBLEdBQUdBLENBQUFBLENBQUNBLEdBQUdB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IjoibGliL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcGF0aEV4aXN0cyBmcm9tIFwicGF0aC1leGlzdHNcIjtcbmltcG9ydCAqIGFzIGZzIGZyb20gXCJmc1wiO1xuaW1wb3J0IG1lcmdlID1yZXF1aXJlKFwianNvbi1hZGRcIik7XG5pbXBvcnQgKiBhcyBQcm9taXNlIGZyb20gXCJibHVlYmlyZFwiO1xubGV0IGV4ZWM9cmVxdWlyZShcInByb21pc2VkLWV4ZWNcIik7XG5cbmV4cG9ydD1mdW5jdGlvbihvcHRpb25zOntpbnRlcmZhY2U6c3RyaW5nLHNzaWQ6c3RyaW5nLHdwYV9wYXNzcGhyYXNlOnN0cmluZ30pe1xuICAgICAgICBsZXQgb3V0cHV0RmlsZVN5bmMgPSBmcy53cml0ZUZpbGVTeW5jO1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3Qpe1xuXG4gIGlmKCFwYXRoRXhpc3RzLnN5bmMoJy9ldGMvZGVmYXVsdC9ob3N0YXBkJykpe1xuICAgIHJlamVjdCgnbm8gZGVmYXVsdCBjb25mIGZpbGUgd2FzIGZvdW5kZWQgZm9yIGhvc3RhcGQnKVxuICB9XG4gIGlmKCFvcHRpb25zIHx8IHR5cGVvZihvcHRpb25zKSE9J29iamVjdCcpe1xuICAgIHJlamVjdCgnVHlwZSBFcnJvciwgcHJvdmlkZSBhIHZhbGlkIGpzb24gb2JqZWN0JylcbiAgfVxuICBpZighb3B0aW9ucy5pbnRlcmZhY2Upe1xuICAgIHJlamVjdCgnTm8gY29uZmlndXJhdGlvbiBpbnRlcmZhY2Ugd2FzIHByb3ZpZGVkJylcbiAgfVxuICBpZighb3B0aW9ucy5zc2lkKXtcbiAgICByZWplY3QoJ05vIGNvbmZpZ3VyYXRpb24gaW50ZXJmYWNlIHdhcyBwcm92aWRlZCcpXG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZW1hc3EoY29uZmlnKXtcbiAgICB2YXIgd3JpdGU9Jyc7XG4gICAgZm9yKHZhciBjPTA7YzxPYmplY3Qua2V5cyhjb25maWcpLmxlbmd0aDtjKyspe1xuICAgICAgaWYoT2JqZWN0LmtleXMoY29uZmlnKVtjXSE9J3BhdGgnJiZPYmplY3Qua2V5cyhjb25maWcpW2NdIT0ndGVzdCcpe1xuICAgICAgICB3cml0ZT13cml0ZStPYmplY3Qua2V5cyhjb25maWcpW2NdKyc9Jytjb25maWdbT2JqZWN0LmtleXMoY29uZmlnKVtjXV0rJ1xcbic7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB3cml0ZVxuICB9XG5cbiAgdmFyIGNvbmZpZz17XG4gICAgcGF0aDonL2V0Yy9ob3N0YXBkL2hvc3RhcGQuY29uZicsXG4gICAgZHJpdmVyOidubDgwMjExJyxcbiAgICBod19tb2RlOidnJyxcbiAgICBjaGFubmVsOjIsXG4gICAgbWFjYWRkcl9hY2w6MCxcbiAgICBhdXRoX2FsZ3M6MSxcbiAgICBpZ25vcmVfYnJvYWRjYXN0X3NzaWQ6MCxcbiAgICB0ZXN0OmZhbHNlXG4gIH1cblxuXG5cbiAgaWYob3B0aW9ucy53cGFfcGFzc3BocmFzZSl7XG4gICAgdmFyIHdwYV9zdGFuZGFyZD17XG4gICAgICB3cGE6MixcbiAgICAgIHdwYV9rZXlfbWdtdDonV1BBLVBTSycsXG4gICAgICB3cGFfcGFpcndpc2U6J1RLSVAnLFxuICAgICAgcnNuX3BhaXJ3aXNlOidDQ01QJ1xuICAgIH1cbiAgICBtZXJnZShjb25maWcsd3BhX3N0YW5kYXJkKVxuICB9XG5cbiAgbWVyZ2UoY29uZmlnLG9wdGlvbnMpXG4gIGlmICghY29uZmlnLnRlc3Qpe1xuICAvLyBpZihmcy5yZWFkRmlsZVN5bmMoJy9ldGMvZGVmYXVsdC9ob3N0YXBkJykhPSdEQUVNT05fQ09ORj1cIicrY29uZmlnLnBhdGgrJ1wiJyl7XG4gIG91dHB1dEZpbGVTeW5jKCcvZXRjL2RlZmF1bHQvaG9zdGFwZCcsICdEQUVNT05fQ09ORj1cIicrY29uZmlnLnBhdGgrJ1wiJywgJ3V0Zi04Jyk7XG4gIC8vIH1cbiAgfVxuXG4gIC8vIG1hbmNhIGlsIGNvbnRyb2xsbyBjaGUgZXZpdGEgZGkgcmlzY3JpdmVyZSBpbCBmaWxlIHNlIMOoIGlkZW50aWNvIGEgcXVlbGxvIHByZXNlbnRlXG4gIG91dHB1dEZpbGVTeW5jKGNvbmZpZy5wYXRoLCBwYXJzZW1hc3EoY29uZmlnKSwgJ3V0Zi04Jyk7XG4gIGlmICghY29uZmlnLnRlc3Qpe1xuXG4gICAgZXhlYygnc3lzdGVtY3RsIHJlc3RhcnQgaG9zdGFwZCcpLnRoZW4oZnVuY3Rpb24oKXtcbiAgICAgIHJlc29sdmUoY29uZmlnKVxuICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycil7XG4gICAgICBjb25zb2xlLmxvZyhlcnIpXG4gICAgICByZWplY3QoZXJyKVxuICAgIH0pXG59ZWxzZXtcbiAgZXhlYygnZWNobycpLnRoZW4oZnVuY3Rpb24oKXtcbiAgICByZXNvbHZlKGNvbmZpZylcbiAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKXtcbiAgICBjb25zb2xlLmxvZyhlcnIpXG4gICAgcmVqZWN0KGVycilcbiAgfSlcbn1cbiAgfSlcblxufTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
