var pathExists = require('path-exists');
fs = require('fs'),
    merge = require('json-add'),
    Promise = require('bluebird'),
    exec = require('promised-exec'),
    outputFileSync = require('output-file-sync');
module.exports = function (options, action) {
    return new Promise(function (resolve, reject) {
        if (!pathExists.sync('/etc/default/hostapd')) {
            reject('no default conf file was founded for hostapd');
        }
        if (!options || typeof (options) != 'object') {
            reject('Type Error, provide a valid json object');
        }
        if (!options.interface) {
            reject('No configuration interface was provided');
        }
        if (!options.ssid) {
            reject('No configuration interface was provided');
        }
        function parsemasq(config) {
            var write = '';
            for (var c = 0; c < Object.keys(config).length; c++) {
                if (Object.keys(config)[c] != 'path') {
                    write = write + Object.keys(config)[c] + '=' + config[Object.keys(config)[c]] + '\n';
                }
            }
            return write;
        }
        var config = {
            path: '/etc/hostapd/hostapd.conf',
            driver: 'nl80211',
            hw_mode: 'g',
            channel: 2,
            macaddr_acl: 0,
            auth_algs: 1,
            ignore_broadcast_ssid: 0
        };
        if (options.wpa_passphrase) {
            var wpa_standard = {
                wpa: 2,
                wpa_key_mgmt: 'WPA-PSK',
                wpa_pairwise: 'TKIP',
                rsn_pairwise: 'CCMP'
            };
            merge(config, wpa_standard);
        }
        merge(config, options);
        if (!config.test) {
            // if(fs.readFileSync('/etc/default/hostapd')!='DAEMON_CONF="'+config.path+'"'){
            outputFileSync('/etc/default/hostapd', 'DAEMON_CONF="' + config.path + '"', 'utf-8');
        }
        // manca il controllo che evita di riscrivere il file se Ã¨ identico a quello presente
        outputFileSync(config.path, parsemasq(config), 'utf-8');
        if (!config.test) {
            exec('systemctl restart hostapd').then(function () {
                resolve(config);
            }).catch(function (err) {
                console.log(err);
                reject(err);
            });
        }
        else {
            exec('echo').then(function () {
                resolve(config);
            }).catch(function (err) {
                console.log(err);
                reject(err);
            });
        }
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9pbmRleC50cyJdLCJuYW1lcyI6WyJwYXJzZW1hc3EiXSwibWFwcGluZ3MiOiJBQUFBLElBQU8sVUFBVSxXQUFTLGFBQWEsQ0FBQyxDQUFBO0FBQ3hDLEVBQUUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO0lBQ2xCLEtBQUssR0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDO0lBQ3pCLE9BQU8sR0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO0lBQzFCLElBQUksR0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDO0lBQzdCLGNBQWMsR0FBRyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUc3QyxNQUFNLENBQUMsT0FBTyxHQUFDLFVBQVMsT0FBTyxFQUFDLE1BQU07SUFDcEMsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLFVBQVMsT0FBTyxFQUFDLE1BQU07UUFFMUMsRUFBRSxDQUFBLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQSxDQUFDO1lBQzNDLE1BQU0sQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFBO1FBQ3hELENBQUM7UUFDRCxFQUFFLENBQUEsQ0FBQyxDQUFDLE9BQU8sSUFBSSxPQUFNLENBQUMsT0FBTyxDQUFDLElBQUUsUUFBUSxDQUFDLENBQUEsQ0FBQztZQUN4QyxNQUFNLENBQUMseUNBQXlDLENBQUMsQ0FBQTtRQUNuRCxDQUFDO1FBQ0QsRUFBRSxDQUFBLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUEsQ0FBQztZQUNyQixNQUFNLENBQUMseUNBQXlDLENBQUMsQ0FBQTtRQUNuRCxDQUFDO1FBQ0QsRUFBRSxDQUFBLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBQztZQUNoQixNQUFNLENBQUMseUNBQXlDLENBQUMsQ0FBQTtRQUNuRCxDQUFDO1FBRUQsbUJBQW1CLE1BQU07WUFDdkJBLElBQUlBLEtBQUtBLEdBQUNBLEVBQUVBLENBQUNBO1lBQ2JBLEdBQUdBLENB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dHM9cmVxdWlyZSgncGF0aC1leGlzdHMnKSxcbmZzID0gcmVxdWlyZSgnZnMnKSxcbm1lcmdlPXJlcXVpcmUoJ2pzb24tYWRkJyksXG5Qcm9taXNlPXJlcXVpcmUoJ3Byb21pc2UnKSxcbmV4ZWM9cmVxdWlyZSgncHJvbWlzZWQtZXhlYycpLFxub3V0cHV0RmlsZVN5bmMgPSByZXF1aXJlKCdvdXRwdXQtZmlsZS1zeW5jJyk7XG5cblxubW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24ob3B0aW9ucyxhY3Rpb24pe1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3Qpe1xuXG4gIGlmKCFwYXRoRXhpc3RzLnN5bmMoJy9ldGMvZGVmYXVsdC9ob3N0YXBkJykpe1xuICAgIHJlamVjdCgnbm8gZGVmYXVsdCBjb25mIGZpbGUgd2FzIGZvdW5kZWQgZm9yIGhvc3RhcGQnKVxuICB9XG4gIGlmKCFvcHRpb25zIHx8IHR5cGVvZihvcHRpb25zKSE9J29iamVjdCcpe1xuICAgIHJlamVjdCgnVHlwZSBFcnJvciwgcHJvdmlkZSBhIHZhbGlkIGpzb24gb2JqZWN0JylcbiAgfVxuICBpZighb3B0aW9ucy5pbnRlcmZhY2Upe1xuICAgIHJlamVjdCgnTm8gY29uZmlndXJhdGlvbiBpbnRlcmZhY2Ugd2FzIHByb3ZpZGVkJylcbiAgfVxuICBpZighb3B0aW9ucy5zc2lkKXtcbiAgICByZWplY3QoJ05vIGNvbmZpZ3VyYXRpb24gaW50ZXJmYWNlIHdhcyBwcm92aWRlZCcpXG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZW1hc3EoY29uZmlnKXtcbiAgICB2YXIgd3JpdGU9Jyc7XG4gICAgZm9yKHZhciBjPTA7YzxPYmplY3Qua2V5cyhjb25maWcpLmxlbmd0aDtjKyspe1xuICAgICAgaWYoT2JqZWN0LmtleXMoY29uZmlnKVtjXSE9J3BhdGgnKXtcbiAgICAgICAgd3JpdGU9d3JpdGUrT2JqZWN0LmtleXMoY29uZmlnKVtjXSsnPScrY29uZmlnW09iamVjdC5rZXlzKGNvbmZpZylbY11dKydcXG4nO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gd3JpdGVcbiAgfVxuXG4gIHZhciBjb25maWc9e1xuICAgIHBhdGg6Jy9ldGMvaG9zdGFwZC9ob3N0YXBkLmNvbmYnLFxuICAgIGRyaXZlcjonbmw4MDIxMScsXG4gICAgaHdfbW9kZTonZycsXG4gICAgY2hhbm5lbDoyLFxuICAgIG1hY2FkZHJfYWNsOjAsXG4gICAgYXV0aF9hbGdzOjEsXG4gICAgaWdub3JlX2Jyb2FkY2FzdF9zc2lkOjBcbiAgfVxuXG5cblxuICBpZihvcHRpb25zLndwYV9wYXNzcGhyYXNlKXtcbiAgICB2YXIgd3BhX3N0YW5kYXJkPXtcbiAgICAgIHdwYToyLFxuICAgICAgd3BhX2tleV9tZ210OidXUEEtUFNLJyxcbiAgICAgIHdwYV9wYWlyd2lzZTonVEtJUCcsXG4gICAgICByc25fcGFpcndpc2U6J0NDTVAnXG4gICAgfVxuICAgIG1lcmdlKGNvbmZpZyx3cGFfc3RhbmRhcmQpXG4gIH1cblxuICBtZXJnZShjb25maWcsb3B0aW9ucylcbiAgaWYgKCFjb25maWcudGVzdCl7XG4gIC8vIGlmKGZzLnJlYWRGaWxlU3luYygnL2V0Yy9kZWZhdWx0L2hvc3RhcGQnKSE9J0RBRU1PTl9DT05GPVwiJytjb25maWcucGF0aCsnXCInKXtcbiAgb3V0cHV0RmlsZVN5bmMoJy9ldGMvZGVmYXVsdC9ob3N0YXBkJywgJ0RBRU1PTl9DT05GPVwiJytjb25maWcucGF0aCsnXCInLCAndXRmLTgnKTtcbiAgLy8gfVxuICB9XG5cbiAgLy8gbWFuY2EgaWwgY29udHJvbGxvIGNoZSBldml0YSBkaSByaXNjcml2ZXJlIGlsIGZpbGUgc2Ugw6ggaWRlbnRpY28gYSBxdWVsbG8gcHJlc2VudGVcbiAgb3V0cHV0RmlsZVN5bmMoY29uZmlnLnBhdGgsIHBhcnNlbWFzcShjb25maWcpLCAndXRmLTgnKTtcbiAgaWYgKCFjb25maWcudGVzdCl7XG5cbiAgICBleGVjKCdzeXN0ZW1jdGwgcmVzdGFydCBob3N0YXBkJykudGhlbihmdW5jdGlvbigpe1xuICAgICAgcmVzb2x2ZShjb25maWcpXG4gICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKXtcbiAgICAgIGNvbnNvbGUubG9nKGVycilcbiAgICAgIHJlamVjdChlcnIpXG4gICAgfSlcbn1lbHNle1xuICBleGVjKCdlY2hvJykudGhlbihmdW5jdGlvbigpe1xuICAgIHJlc29sdmUoY29uZmlnKVxuICB9KS5jYXRjaChmdW5jdGlvbihlcnIpe1xuICAgIGNvbnNvbGUubG9nKGVycilcbiAgICByZWplY3QoZXJyKVxuICB9KVxufVxuICB9KVxuXG59O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
